'use strict';

const axios = require('axios');
// const _ = require('lodash');

// 邮箱API基础访问地址
const baseURL = 'https://api.exmail.qq.com/cgi-bin';
// 不需要使用AccessToken的接口白名单
const whiteList = [ 'gettoken' ];
// AccessToken有效时长
const expires = 7000000;

class exmail {
  /**
   * 构造函数
   * @param CorpID
   * @param CorpSecret
   */
  constructor({ CorpID, CorpSecret }) {
    this.CorpID = CorpID;
    this.CorpSecret = CorpSecret;
    // 腾讯企业邮API操作秘钥,用于各接口的调用
    this.AccessToken = '';
    this.request = axios.create({
      baseURL,
      timeout: 5000,
    });
    this.request.interceptors.request.use(
      async config => {
        if (whiteList.indexOf(config.url) < 0) {
          config.params = Object.assign({ access_token: await this.getAccessToken() }, config.params);
        }
        return config;
      },
      error => Promise.reject(error)
    );
    this.request.interceptors.response.use(
      response => {
        const dataAxios = response.data;
        const { errcode } = dataAxios;
        if (errcode === 0) {
          return dataAxios;
        }
        const err = new Error(dataAxios.errmsg);
        err.number = errcode;
        throw err;
      },
      error => {
        if (error && error.response) {
          switch (error.response.status) {
            case 400:
              error.message = '请求错误';
              break;
            case 401:
              error.message = '未授权，请登录';
              break;
            case 403:
              error.message = '拒绝访问';
              break;
            case 404:
              error.message = `请求地址出错：${error.response.config.url}`;
              break;
            case 408:
              error.message = '请求超时';
              break;
            case 500:
              error.message = '服务器内部错误';
              break;
            case 501:
              error.message = '服务未实现';
              break;
            case 502:
              error.message = '网关错误';
              break;
            case 503:
              error.message = '服务不可用';
              break;
            case 504:
              error.message = '网关超时';
              break;
            case 505:
              error.message = 'http版本不受支持';
              break;
            default:
              break;
          }
        }
        return Promise.reject(error);
      }
    );
  }


  /**
   * 获取AccessToken
   * @return {Promise<unknown>}
   */
  getDefaultAccessToken() {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'gettoken',
        params: { corpid: this.CorpID, corpsecret: this.CorpSecret },
      }).then(data => {
        resolve(data.access_token);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 获取AccessToken
   * @return {Promise<unknown>}
   */
  getAccessToken() {
    return new Promise(async (resolve, reject) => {
      if (!this.AccessToken) {
        try {
          this.AccessToken = await this.getDefaultAccessToken();
        } catch (err) {
          reject(err);
        }
        setTimeout(() => {
          this.AccessToken = '';
        }, expires);
      }
      resolve(this.AccessToken);
    });
  }

  /**
   * 创建部门
   * @param data
   * name	是	部门名称，长度限制为32个字符
   * parentid	是	父部门id。id为1可表示根部门
   * order	否	在父部门中的次序值。order值小的排序靠前，1-10000为保留值，若使用保留值，将被强制重置为0
   * @return {Promise<unknown>}
   */
  departmentCreate(data) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'department/create',
        method: 'post',
        data,
      }).then(data => {
        resolve(data.id);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 更新部门
   * @param data
   * id	是	部门id
   * name	否	部门名称，长度限制为32个字符，需要修改部门名称时填写该参数
   * parentid	否	父部门id。id为1可表示根部门
   * order	否	在父部门中的次序值。order值小的排序靠前，1-10000为保留值，若使用保留值，将被强制重置为0。
   * @return {Promise<unknown>}
   */
  departmentUpdate(data) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'department/update',
        method: 'post',
        data,
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 删除部门
   * @param departId 部门id。（注：不能删除根部门；不能删除含有子部门、成员的部门）
   * @return {Promise<unknown>}
   */
  departmentDelete(departId) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'department/delete',
        params: { id: departId },
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 获取部门列表
   * @param departId 部门id。获取指定部门及其下的子部门。id为1时可获取根部门下的子部门。
   * @return {Promise<unknown>}
   */
  departmentList(departId) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'department/list',
        params: { id: departId },
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 查找部门
   * @param data
   * name	否	查找的部门名字，必须合法
   * fuzzy	否	1/0：是否模糊匹配
   * @return {Promise<unknown>}
   */
  departmentSearch(data) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'department/search',
        method: 'post',
        data,
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 按部门设置VIP账号
   * @param data
   * departmentid	是	部门id
   * setvip	是	1为设置全体部门成员为vip，0为取消全体部门VIP
   * @return {Promise<unknown>}
   */
  departmentSetvip(data) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'department/setvip',
        method: 'post',
        data,
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 创建成员
   * @param data
   * userid	是	成员UserID。企业邮帐号名，邮箱格式
   * name	是	成员名称，长度不可超过32个汉字或者64个字符
   * department	是	成员所属部门id列表，不超过20个
   * position	否	职位信息，长度不可超过32个汉字或者64个字符
   * mobile	否	手机号，新版本企业邮箱中为选填项，密码和手机号至少填写一项。老版本企业邮中，手机号为选填项。
   * tel	否	座机号码
   * extid	否	编号
   * gender	否	性别。1表示男性，2表示女性
   * slaves	否	别名列表
   * 1.Slaves 上限为5个
   * 2.Slaves 为邮箱格式
   * password	否	密码，必须同时包含大小写字母和数字，长度6-32位，不包含账户信息。新版本企业邮箱中为选填项，密码和手机号至少填写一项。老版本企业邮，密码为必填项。
   * cpwd_login	否	用户重新登录时是否重设密码, 登陆重设密码后，该标志位还原。0表示否，1表示是，缺省为0
   * setvip	否	设定创建的用户是否为VIP账户。0表示普通账号，1表示VIP账号
   * @return {Promise<unknown>}
   */
  userCreate(data) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'user/create',
        method: 'post',
        data,
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 更新成员
   * @param data
   * userid	是	成员UserID。企业邮帐号名，邮箱格式
   * name	否	成员名称，长度不可超过32个汉字或者64个字符
   * department	否	成员所属部门id列表，不能超过20个，不填或者置空则为不改变
   * position	否	职位信息，长度不可超过32个汉字或者64个字符
   * mobile	否	手机号码
   * tel	否	座机号码
   * extid	否	编号
   * gender	否	性别。1表示男性，2表示女性
   * slaves	否	别名列表
   * 1.Slaves 上限为5个
   * 2.Slaves 为邮箱格式
   * enable	否	启用/禁用成员。1表示启用成员，0表示禁用成员
   * password	否	密码，必须同时包含大小写字母和数字，长度6-32位，不包含账户信息，帐号若已绑定手机或微信，需员工修改密码
   * cpwd_login	否	用户重新登录时是否重设密码, 登陆重设密码后，该标志位还原。0表示否，1表示是，缺省为0
   * setvip	否	修改用户是否为VIP账户。0表示普通账号，1表示VIP账号
   * @return {Promise<unknown>}
   */
  userUpdate(data) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'user/update',
        method: 'post',
        data,
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 删除成员
   * @param userid 是	成员UserID。企业邮帐号名，邮箱格式
   * @return {Promise<unknown>}
   */
  userDelete(userid) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'user/delete',
        params: { userid },
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 获取成员
   * @param userid 是	成员UserID。企业邮帐号名，邮箱格式
   * @return {Promise<unknown>}
   */
  userGet(userid) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'user/get',
        params: { userid },
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 获取部门成员
   * @param data
   * department_id	是	获取的部门id。id为1时可获取根部门下的成员
   * fetch_child	否	1/0：是否递归获取子部门下面的成员
   * @return {Promise<unknown>}
   */
  userSimpleList(data) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'user/simplelist',
        params: data,
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 获取部门成员（详情）
   * @param data
   * department_id	是	获取的部门id。id为1时可获取根部门下的成员
   * fetch_child	否	1/0：是否递归获取子部门下面的成员
   * @return {Promise<unknown>}
   */
  userList(data) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'user/list',
        params: data,
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 批量检查帐号
   * @param userlist 成员帐号，每次检查不得超过20个 帐号类型。-1:帐号号无效; 0:帐号名未被占用; 1:主帐号; 2:别名帐号; 3:邮件群组帐号
   * @return {Promise<unknown>}
   */
  userBatchCheck(userlist = []) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'user/batchcheck',
        method: 'post',
        data: { userlist },
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }

  /**
   * 模糊搜索成员
   * @param userid 成员UserID
   * @return {Promise<unknown>}
   */
  userFuzzySearch(userid) {
    return new Promise((resolve, reject) => {
      this.request({
        url: 'user/fuzzysearch',
        params: { userid },
      }).then(data => {
        resolve(data);
      }).catch(err => {
        reject(err);
      });
    });
  }
}

module.exports = exmail;
